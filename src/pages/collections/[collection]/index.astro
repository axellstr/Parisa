---
import Layout from '../../../layouts/Layout.astro';
import Marquee from '../../../components/Marquee.astro';
import Navigation from '../../../components/Navigation.astro';
import Footer from '../../../components/Footer.astro';
import ProductCard from '../../../components/shop/ProductCard.astro';
import CartDrawer from '../../../components/CartDrawer.astro';
import collections from '../../../data/collections.json';
import products from '../../../data/products.json';

export async function getStaticPaths() {
  return Object.keys(collections).map(collectionId => ({
    params: { collection: collectionId },
    props: { 
      collection: (collections as any)[collectionId],
      products: (products as any)[collectionId] || []
    }
  }));
}

const { collection, products: collectionProducts } = Astro.props;

// Sort products - featured first, then new arrivals, then by name
const sortedProducts = collectionProducts.sort((a: any, b: any) => {
  if (a.featured && !b.featured) return -1;
  if (!a.featured && b.featured) return 1;
  if (a.new_arrival && !b.new_arrival) return -1;
  if (!a.new_arrival && b.new_arrival) return 1;
  return a.name.localeCompare(b.name);
});

const formatPrice = (price: number) => `£${(price / 100).toFixed(0)}`;
---

<Layout 
  title={collection.seo.title}
  description={collection.seo.description}
>
  <Marquee />
  <Navigation />
  <main class="collection-page">
    <section class="collection-hero">
      <div class="hero-background">
        <img 
          src={collection.hero_image} 
          alt={collection.name}
          width="1200"
          height="600"
          class="hero-image"
        />
        <div class="hero-overlay"></div>
      </div>
      
      <div class="container">
        <div class="hero-content">
          <nav class="breadcrumb" aria-label="Breadcrumb">
            <a href="/">Home</a>
            <span aria-hidden="true">→</span>
            <a href="/collections">Collections</a>
            <span aria-hidden="true">→</span>
            <span aria-current="page">{collection.name}</span>
          </nav>
          
          <h1>{collection.name}</h1>
          <p class="hero-description">{collection.description}</p>
        </div>
      </div>
    </section>

    <section class="products-section">
      <div class="container">
        <div class="section-header">
          <h2>Explore the Collection</h2>
          <div class="filters">
            <label for="sort-select" class="sr-only">Sort products</label>
            <select id="sort-select" class="sort-select">
              <option value="featured">Featured First</option>
              <option value="price-low">Price: Low to High</option>
              <option value="price-high">Price: High to Low</option>
              <option value="name">Name A-Z</option>
            </select>
          </div>
        </div>
        
        <div class="products-grid" data-products-grid>
          {sortedProducts.map((product: any) => (
            <ProductCard 
              product={product} 
              collection={collection.id}
              showQuickAdd={true}
            />
          ))}
        </div>

        {collectionProducts.length === 0 && (
          <div class="empty-collection">
            <h3>Coming Soon</h3>
            <p>This collection is being curated. Check back soon for beautiful new pieces.</p>
          </div>
        )}
      </div>
    </section>

    <section class="collection-story">
      <div class="container">
        <div class="story-content">
          <h2>About This Collection</h2>
          <p>{collection.description}</p>
          
          <div class="collection-highlights">
            <div class="highlight">
              <h3>Authentic Persian Turquoise</h3>
              <p>Every piece features genuine Persian turquoise, renowned for its vibrant color and unique matrix patterns.</p>
            </div>
            <div class="highlight">
              <h3>Handcrafted Excellence</h3>
              <p>Each piece is meticulously handcrafted by skilled artisans using traditional techniques.</p>
            </div>
            <div class="highlight">
              <h3>18k Gold Setting</h3>
              <p>Premium 18k gold provides the perfect complement to the natural beauty of Persian turquoise.</p>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>
  <Footer />
  
  <!-- Cart Drawer -->
  <CartDrawer />
</Layout>

<style>
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Hero Section */
  .collection-hero {
    position: relative;
    min-height: 30vh;
    display: flex;
    align-items: center;
    color: var(--text-dark);
    overflow: hidden;
    background: var(--background-light);
  }

  .hero-background {
    position: absolute;
    inset: 0;
    z-index: -2;
    opacity: 0.1;
  }

  .hero-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .hero-overlay {
    position: absolute;
    inset: 0;
    background: rgba(237, 246, 249, 0.8);
    z-index: -1;
  }

  .hero-content {
    position: relative;
    z-index: 1;
    max-width: 600px;
  }

  .breadcrumb {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 2rem;
    font-size: 0.875rem;
    opacity: 0.9;
  }

  .breadcrumb a {
    color: var(--text-light);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .breadcrumb a:hover {
    color: var(--primary-turquoise);
  }

  .hero-content h1 {
    font-size: 3.5rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    letter-spacing: -0.025em;
    line-height: 1.1;
    font-family: 'Playfair Display', serif;
    color: var(--text-dark);
  }

  .hero-description {
    font-size: 1.25rem;
    line-height: 1.6;
    margin-bottom: 2rem;
    color: var(--text-light);
  }

  /* Products Section */
  .products-section {
    padding: 2rem 0;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 3rem;
  }

  .section-header h2 {
    font-size: 2.5rem;
    font-weight: 600;
    color: var(--text-dark);
    font-family: 'Playfair Display', serif;
  }

  .sort-select {
    padding: 0.75rem 1rem;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    background: white;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: border-color 0.2s ease;
  }

  .sort-select:focus {
    outline: none;
    border-color: var(--primary-turquoise);
    box-shadow: 0 0 0 3px rgba(36, 106, 115, 0.1);
  }

  .products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .empty-collection {
    text-align: center;
    padding: 4rem 2rem;
    color: #6b7280;
  }

  .empty-collection h3 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: var(--text-dark);
    font-family: 'Playfair Display', serif;
  }

  /* Collection Story */
  .collection-story {
    padding: 4rem 0;
    background: #f9fafb;
  }

  .story-content {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
  }

  .story-content h2 {
    font-size: 2.25rem;
    font-weight: 600;
    color: var(--text-dark);
    margin-bottom: 1.5rem;
    font-family: 'Playfair Display', serif;
  }

  .story-content > p {
    font-size: 1.125rem;
    color: var(--text-light);
    line-height: 1.7;
    margin-bottom: 3rem;
  }

  .collection-highlights {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    margin-top: 3rem;
  }

  .highlight {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    border: 1px solid rgba(36, 106, 115, 0.1);
  }

  .highlight h3 {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-dark);
    margin-bottom: 1rem;
    font-family: 'Playfair Display', serif;
  }

  .highlight p {
    color: var(--text-light);
    line-height: 1.6;
    margin: 0;
  }

  @media (max-width: 768px) {

    .hero-content h1 {
      font-size: 2.5rem;
    }

    .hero-description {
      font-size: 1.1rem;
    }

    .collection-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .section-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .section-header h2 {
      font-size: 2rem;
    }

    .products-grid {
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 1.5rem;
    }

    .story-content h2 {
      font-size: 1.875rem;
    }

    .collection-highlights {
      gap: 1rem;
    }

    .highlight {
      padding: 1.5rem;
    }
  }
</style>

<script>
  // Simple sorting functionality
  document.addEventListener('DOMContentLoaded', () => {
    const sortSelect = document.getElementById('sort-select');
    const productsGrid = document.querySelector('[data-products-grid]');
    
    if (sortSelect && productsGrid) {
      sortSelect.addEventListener('change', (e) => {
        const sortValue = (e.target as HTMLSelectElement).value;
        const products = Array.from(productsGrid.children);
        
        products.sort((a, b) => {
          const aCard = a.querySelector('.product-card');
          const bCard = b.querySelector('.product-card');
          
          if (!aCard || !bCard) return 0;
          
          switch (sortValue) {
            case 'price-low':
              const aPriceLow = parseInt((aCard.querySelector('.add-to-cart') as HTMLElement)?.dataset.productPrice || '0');
              const bPriceLow = parseInt((bCard.querySelector('.add-to-cart') as HTMLElement)?.dataset.productPrice || '0');
              return aPriceLow - bPriceLow;
              
            case 'price-high':
              const aPriceHigh = parseInt((aCard.querySelector('.add-to-cart') as HTMLElement)?.dataset.productPrice || '0');
              const bPriceHigh = parseInt((bCard.querySelector('.add-to-cart') as HTMLElement)?.dataset.productPrice || '0');
              return bPriceHigh - aPriceHigh;
              
            case 'name':
              const aName = aCard.querySelector('.product-name')?.textContent || '';
              const bName = bCard.querySelector('.product-name')?.textContent || '';
              return aName.localeCompare(bName);
              
            default: // featured
              return 0; // Keep original order
          }
        });
        
        // Re-append sorted products
        products.forEach(product => productsGrid.appendChild(product));
      });
    }
  });
</script>
